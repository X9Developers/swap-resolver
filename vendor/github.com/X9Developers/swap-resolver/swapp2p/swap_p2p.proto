
syntax = "proto3";

//import "google/api/annotations.proto";

//option java_multiple_files = true;
//option java_package = "io.grpc.examples.routeguide";
//option java_outer_classname = "RouteGuideProto";

package swapresolver;

enum CoinType {
  BTC = 0;
  LTC = 1;
  XSN = 2;
}

service P2P {
  // TakeOrder is called to initiate a swap between maker and taker
  // it is a temporary service needed until the integration with XUD
  // intended to be called from CLI to simulate order taking by taker
  rpc TakeOrder(TakeOrderReq) returns (TakeOrderResp) {}

  // SuggestDeal is called by the taker to inform the maker that he
  // would like to execute a swap. The maker may reject the request
  // for now, the maker can only accept/reject and can't rediscuss the
  // deal or suggest partial amount. If accepted the maker should respond
  // with a hash that would be used for teh swap.
  rpc SuggestDeal(SuggestDealReq) returns (SuggestDealResp) {}

  // Swap initiates the swap. It is called by the taker to confirm that
  // he has the hash and confirm the deal.
  rpc Swap(SwapReq) returns (SwapResp) {}

}
message TakeOrderReq{
  string orderid = 1 ;  // global order ID on XUD system
  int64 taker_amount = 2 ;
  CoinType taker_coin = 3 ;
  int64 maker_amount = 4 ;
  CoinType maker_coin =5 ;
}

message TakeOrderResp{
  bytes r_preimage = 1;
}

message SuggestDealReq{
  string orderid = 1 ;  // global order ID on XUD system
  string taker_deal_id = 2 ;
  int64 taker_amount = 3 ;
  CoinType taker_coin = 4 ;
  int64 maker_amount = 5 ;
  CoinType maker_coin = 6 ;
  string taker_pubkey = 7 ; // on taker coin network
}

message SuggestDealResp{
  string orderid = 1 ;
  bytes r_hash = 2 ;
  string maker_deal_id = 3 ;
  string maker_pubkey = 4 ; // on maker coin network

}

message SwapReq{
  string maker_deal_id = 1 ;
}

message SwapResp{
  bytes r_preimage = 1;
}

